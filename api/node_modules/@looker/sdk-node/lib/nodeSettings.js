"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.readIniConfig = exports.readEnvConfig = exports.getenv = exports.NodeSettingsIniFile = exports.NodeSettings = exports.ApiConfigSection = exports.ApiConfig = void 0;
var fs = _interopRequireWildcard(require("fs"));
var ini = _interopRequireWildcard(require("ini"));
var _sdkRtl = require("@looker/sdk-rtl");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var getenv = exports.getenv = function getenv(name) {
  var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
  var val = process.env[name];
  return val === undefined ? defaultValue : val;
};
var ApiConfig = contents => ini.parse(contents);
exports.ApiConfig = ApiConfig;
var ApiConfigSection = (contents, section) => {
  var config = ApiConfig(contents);
  if (!section) {
    section = Object.keys(config)[0];
  }
  var settings = config[section];
  if (!settings) {
    throw new Error("No section named \"".concat(section, "\" was found"));
  }
  if (settings.api_version) {
    console.warn('api_version is no longer read from a configuration file by the SDK');
  }
  return settings;
};
exports.ApiConfigSection = ApiConfigSection;
var readEnvConfig = envPrefix => {
  var values = {};
  var configMap = (0, _sdkRtl.ApiConfigMap)(envPrefix);
  Object.keys(configMap).forEach(key => {
    var envKey = configMap[key];
    if (process.env[envKey] !== undefined) {
      var val = (0, _sdkRtl.unquote)(process.env[envKey]);
      values[key] = val;
    }
  });
  return values;
};
exports.readEnvConfig = readEnvConfig;
var readIniConfig = (fileName, envPrefix, section) => {
  var config = readEnvConfig(envPrefix);
  if (fileName && fs.existsSync(fileName)) {
    config = _objectSpread(_objectSpread({}, ApiConfigSection(fs.readFileSync(fileName, 'utf8'), section)), config);
  }
  Object.keys(config).forEach(key => {
    var val = config[key];
    if (typeof val === 'string') {
      config[key] = (0, _sdkRtl.unquote)(val);
    }
  });
  return config;
};
exports.readIniConfig = readIniConfig;
class NodeSettings extends _sdkRtl.ApiSettings {
  constructor(envPrefix, contents, section) {
    var settings;
    if (contents) {
      if (typeof contents === 'string') {
        settings = ApiConfigSection(contents, section);
      } else {
        settings = contents;
      }
      settings = _objectSpread(_objectSpread({}, readEnvConfig(envPrefix)), settings);
    } else {
      settings = readEnvConfig(envPrefix);
    }
    super(_objectSpread(_objectSpread({}, (0, _sdkRtl.DefaultSettings)()), settings));
    _defineProperty(this, "envPrefix", void 0);
    _defineProperty(this, "section", void 0);
    this.section = section !== null && section !== void 0 ? section : '';
    this.envPrefix = envPrefix;
  }
  readConfig(_section) {
    return readEnvConfig(this.envPrefix);
  }
}
exports.NodeSettings = NodeSettings;
class NodeSettingsIniFile extends NodeSettings {
  constructor(envPrefix) {
    var fileName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    var section = arguments.length > 2 ? arguments[2] : undefined;
    if (fileName && !fs.existsSync(fileName)) {
      throw (0, _sdkRtl.sdkError)({
        message: "File ".concat(fileName, " was not found")
      });
    }
    fileName = fileName || './looker.ini';
    var config = readIniConfig(fileName, envPrefix, section);
    var settings = (0, _sdkRtl.ValueSettings)(config, envPrefix);
    super(envPrefix, settings, section);
    _defineProperty(this, "fileName", void 0);
    this.fileName = fileName;
  }
  readConfig(section) {
    section = section || this.section;
    return readIniConfig(this.fileName, this.envPrefix, section);
  }
}
exports.NodeSettingsIniFile = NodeSettingsIniFile;
//# sourceMappingURL=nodeSettings.js.map